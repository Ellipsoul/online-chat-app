{"version":3,"sources":["Login.tsx","Message.tsx","Chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Login","useState","name","setName","shouldRedirect","redirectTo","openSnackBar","setOpen","alertMessage","setAlertMessage","to","pathname","state","handleSubmitName","e","length","height","window","innerHeight","width","innerWidth","input_theme","createMuiTheme","typography","fontSize","button_theme","Container","maxWidth","className","id","href","target","src","ThemeProvider","theme","TextField","fullWidth","multiline","rows","value","onChange","variant","color","placeholder","onKeyDown","key","Button","onClick","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","autoHideDuration","message","Message","props","date_moment","isMobile","moment","date","format","Chat","location","useLocation","messageField","setMessageField","latestMessageTime","setLatestMessageTime","latestMessageTimeRef","useRef","current","messageKey","setMessageKey","messageKeyRef","handleSubmitMessage","preventDefault","Date","now","date_unix","getTime","axios","post","toString","console","log","sent_message","setCurrentMessages","currentMessages","useEffect","retrieve_all_messages","rawMessages","setRawMessages","rawMessagesRef","fetch","method","mode","headers","then","res","json","data","all_messages","map","message_info","index","retrieve_new_messages","last_message_unix","parseInt","queryString","new_messages","newMessagesJSX","messagesEndRef","scrollIntoView","behavior","numrows","Math","floor","interval","setInterval","clearInterval","devButtons","showDevButtons","disableGutters","ref","Box","label","dateUnix","App","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2be1f706.chunk.js","sourcesContent":["import React, { useState, SyntheticEvent, ReactElement } from 'react';\nimport { Container } from '@material-ui/core';\nimport { Redirect } from 'react-router-dom';\nimport './App.css';\nimport { TextField, Button, Snackbar } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nexport default function Login():ReactElement {\n\n\tconst [name, setName] = useState(\"\");  \t\t\t    \t// Tracks user name state\n\tconst [shouldRedirect, redirectTo] = useState('');  \t// Tracks redirect location state\n\tconst [openSnackBar, setOpen] = useState(false);\t \t// Tracks snackbar status\n\tconst [alertMessage, setAlertMessage] = useState(\"\"); \t// Tracks alert message\n\n\t// Occurs when a redirect path state is detected\n\tif (shouldRedirect) {\n\t\t// Redirect to main chat after name submit\n\t\treturn (\n\t\t\t<Redirect to={{ \n\t\t\t\tpathname:shouldRedirect, \n\t\t\t\tstate: { name: name }\n\t\t\t}} />\n\t\t)\n\t}\n\n\t// Handling name submission\n\tconst handleSubmitName = (e:SyntheticEvent) => {\n\t\t// No name entered\n\t\tif (!name.length) {\n\t\t\tsetAlertMessage(\"Please enter a non-empty name\")\n\t\t\tsetOpen(true);\n\t\t}\n\t\t// Name too long\n\t\telse if (name.length > 20) {\n\t\t\tsetAlertMessage(\"Please enter a shorter name!\")\n\t\t\tsetOpen(true);\n\t\t} \n\t\t// Successful redirect to chat\n\t\telse {\n\t\t\treturn redirectTo('/chat');\n\t\t}\n\t}\n\n\t// Used to determine button and input field size\n\tconst height:number = window.innerHeight;\n\tconst width:number = window.innerWidth;\n\n\t// Theme for name input field\n\tconst input_theme = createMuiTheme({\n\t\ttypography: {\n\t\t  fontSize: 0.03 * height\n\t\t}\n\t  });\n\n\t// Theme for button\n\tconst button_theme = createMuiTheme({\n\t\ttypography: {\n\t\t\tfontSize: 0.02 * width + 0.02 * height\n\t\t}\n\t})\n\t\n\t// Enter key functionality for submitting name\n\tconst checkEnterPressed = (e:any) => {\n\t\tif (e.key == \"Enter\") {\n\t\t\thandleSubmitName(e)\n\t\t}\n\t}\n\n\t// Snackbar close handling\n\tconst closeSnackBar = () => {\n\t\tsetOpen(false);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Container maxWidth=\"lg\" className=\"large_login_container\">\n\t\t\t\t<section id=\"login_container\">\n\n\t\t\t\t\t{/* Welcome and short description */}\n\t\t\t\t\t<div id=\"welcome\">\n\t\t\t\t\t\tWelcome!\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"info\"> \n\t\t\t\t\t\tThis is a simple chat site where you can connect with your name and chat with all connected users! Made with: \n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Tech links */}\n\t\t\t\t\t<div id=\"logos\">\n\t\t\t\t\t\t{/* GitHub */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://github.com/Ellipsoul\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/online-chat-app/images/github_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* React */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://reactjs.org/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/online-chat-app/images/react_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Typescript */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://www.typescriptlang.org/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/online-chat-app/images/typescript_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Python */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://www.python.org/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/online-chat-app/images/python_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Flask */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://flask.palletsprojects.com/en/1.1.x/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/online-chat-app/images/flask_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Heroku */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://www.heroku.com/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/online-chat-app/images/heroku_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* User login area */}\n\t\t\t\t\t<div id=\"name_login\">\n\t\t\t\t\t\t{/* Name input field */}\n\t\t\t\t\t\t<div className=\"name_input\"> \n\t\t\t\t\t\t\t<ThemeProvider theme={input_theme}>\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\tmultiline\n\t\t\t\t\t\t\t\t\trows={1}\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={e => setName(e.target.value)}\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Enter name\"\n\t\t\t\t\t\t\t\t\tonKeyDown={checkEnterPressed}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ThemeProvider>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* Submit button */}\n\t\t\t\t\t\t<div className=\"name_submit_div\">\n\t\t\t\t\t\t\t<ThemeProvider theme={button_theme}>\n\t\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\t\tvariant=\"contained\" \n\t\t\t\t\t\t\t\t\tcolor=\"primary\" \n\t\t\t\t\t\t\t\t\tclassName=\"name_button\"\n\t\t\t\t\t\t\t\t\tonClick={handleSubmitName}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tStart Chatting!\t\n\t\t\t\t\t\t\t\t</Button> \n\t\t\t\t\t\t\t</ThemeProvider>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Invalid name warning snackbar */}\n\t\t\t\t\t\t<Snackbar\n\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\tanchorOrigin={{\n\t\t\t\t\t\t\tvertical: 'bottom',\n\t\t\t\t\t\t\thorizontal: 'center',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\topen={openSnackBar}\n\t\t\t\t\t\t\tonClose={closeSnackBar}\n\t\t\t\t\t\t\tautoHideDuration={3000}\n\t\t\t\t\t\t\tmessage={alertMessage}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t</section>\n\t\t\t</Container>\n\t\t</>\n\t)\n}","import React,{ ReactElement } from 'react'\nimport moment from 'moment'\nimport { isMobile } from \"react-device-detect\";\n\n// Retrieving message information\nexport interface messageProps {\n\tname: string;\n\tdate: string;\n\tmessage: string;\n}\n\nexport default function Message(props: messageProps):ReactElement {\n\t// Reformat date (conditional on mobile display)\n\tvar date_moment = !isMobile ? moment(props.date).format('D MMMM YYYY  HH:mm:ss') : moment(props.date).format('D/M  HH:mm');\n\n\treturn (\n\t\t<>\n\t\t\t<section className=\"message_container\">\n\t\t\t\t<div className=\"msg_name\"> {props.name} </div>\n\t\t\t\t<div className=\"msg_date\"> {date_moment} </div>\n\t\t\t\t<div className=\"msg_message\"> {props.message} </div>\n\t\t\t</section>\n\t\t</>\n\t)\n}","import React, { useState, SyntheticEvent, useEffect, useRef } from 'react';\nimport { Container, Button, TextField, Box, Snackbar } from '@material-ui/core';\nimport './App.css';\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Message from \"./Message\";\n\nexport interface chatProps {}  // No props being used right now\n\n// Defining location type to access name state\nexport interface locationProps {\n\tpathname: string;\n\tsearch: string;\n\thash: string;\n\tkey: string;\n\tstate: {name: string};\n}\n\nexport default function Chat(props: chatProps) {\n\t// Retrieve props passed from login\n\tconst location = useLocation() as locationProps;\n\n\tconst [messageField, setMessageField] = useState(\"\");           // Message input field\n\n\tconst [latestMessageTime, setLatestMessageTime] = useState(0);  // Last received/sent message time\n\tconst latestMessageTimeRef = useRef(latestMessageTime);         // Reference\n\tlatestMessageTimeRef.current = latestMessageTime;\n\t\n\tconst [messageKey, setMessageKey] = useState(0);\t\t\t\t// Div keys state\n\tconst messageKeyRef = useRef(messageKey);                       // Reference\n\tmessageKeyRef.current = messageKey;\n\n\t// Send information about input field to backend\n\tconst handleSubmitMessage = (e:SyntheticEvent) => {\n\t\te.preventDefault() // Prevents page from reloading after submitting message\n\n\t\t// Extract message fields\n\t\tconst name = location.state.name;\n\t\tconst date = new Date(Date.now());\n\t\tconst message = messageField;\n\t\tconst date_unix = date.getTime();\n\n\t\t// Send the message with POST request\n\t\tif (messageField.length !== 0 && messageField.length < 1000) {\n\t\t\taxios.post(\"https://online-chat-app-ellipsoul.herokuapp.com/api/send_message\", {\n\t\t\t\tname: name,\n\t\t\t\tdate: date.toString(),\n\t\t\t\tmessage: message,\n\t\t\t\tdate_unix: date_unix\n\t\t\t});\n\t\t\tconsole.log(`Message sent: ${message}`);\n\n\t\t\tsetMessageField(\"\")   // Empty the message container\n\t\t\t// Increment message key and add message locally\n\t\t\tsetMessageKey(messageKeyRef.current+1)\n\t\t\tconst sent_message:any = \n\t\t\t\t<Message\n\t\t\t\t\tkey={messageKeyRef.current}\n\t\t\t\t\tname={name}\n\t\t\t\t\tdate={date.toString()}\n\t\t\t\t\tmessage={message}\n\t\t\t\t/>\n\t\t\tsetCurrentMessages(currentMessages => [...currentMessages, sent_message])\n\t\t\tsetLatestMessageTime(date_unix)  // Update latest message time\n\t\t\treturn false\n\t\t}\n\t\t// Flag down empty/long messages and open snackbar\n\t\telse {\n\t\t\tsetOpen(true);\n\t\t}\n\t}\n\n\t// Enter key functionality for sending messages\n\tconst checkEnterPressed = (e:any) => {\n\t\tif (e.key == \"Enter\") { handleSubmitMessage(e) }\n\t}\n\n\t// Retrieve all messages when page is loaded\n\tuseEffect(()=> {\n\t\tretrieve_all_messages();\n\t}, [])\n\n\tconst [rawMessages, setRawMessages] = useState<string[][]>([[]]);  // All messages in raw JSON format\n\tconst rawMessagesRef = useRef(rawMessages);                        // Reference handling\n\trawMessagesRef.current = rawMessages;\n\n\tconst [currentMessages, setCurrentMessages] = useState<string[][]>([[]]);   // All messages in JSX format\n\n\t// Retrieve all current messages from the server (only really call on first load of page)\n\tfunction retrieve_all_messages() {\n\t\tfetch(\"https://online-chat-app-ellipsoul.herokuapp.com/api/get_all_messages\", {\n\t\t\tmethod: \"GET\",\n\t\t\tmode:\"cors\",\n\t\t\theaders: {\"content_type\":\"application/json\"}\n\t\t})\n\t\t.then((res) => res.json())\n\t\t.then((data) => {\n\t\t\tconsole.log(\"Retrieved all messages from server\");\n\t\t\tsetRawMessages(data.all_messages);                  // Update raw messages\n\t\t\tconst length:number = data.all_messages.length;     // Handle div keys logic \n\t\t\tsetMessageKey(messageKeyRef.current+length);\n\t\t\tsetCurrentMessages(data.all_messages.map((message_info:string[], index:number) => {\n\t\t\t\t// Generate a message component for every message\n\t\t\t\treturn (\n\t\t\t\t\t<Message\n\t\t\t\t\t\tkey={messageKeyRef.current - length + index}\n\t\t\t\t\t\tname={message_info[0]}\n\t\t\t\t\t\tdate={message_info[1]}\n\t\t\t\t\t\tmessage={message_info[2]}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t}));\n\t\t})\n\t}\n\n\t// Retrieve only messages that the user has not loaded\n\tfunction retrieve_new_messages() {\n\t\t// If no raw messages loaded on client side then retrieve all messages from serverm instead\n\t\tif (!rawMessagesRef.current.length) { \n\t\t\tretrieve_all_messages();\n\t\t\treturn null\n\t\t}\n\t\t// Retrieve unix timestamp of last message user has (latest between user sent and others sent)\n\t\tlet last_message_unix = (parseInt(rawMessagesRef.current[rawMessagesRef.current.length-1][3]) > latestMessageTimeRef.current) ? rawMessagesRef.current[rawMessagesRef.current.length-1][3] : latestMessageTimeRef.current.toString()\n\n\t\t// Defining GET request query\n\t\tconst queryString = `https://online-chat-app-ellipsoul.herokuapp.com/api/get_new_messages?time=${last_message_unix}`;\n\t\tconsole.log(`Getting new messages with query: ${queryString} for user ${location.state.name}`)\n\n\t\t// Request new messages with query\n\t\tfetch(queryString, {\n\t\t\tmethod: \"GET\",\n\t\t\tmode:\"cors\",\n\t\t\theaders: {\"content_type\":\"application/json\"}\n\t\t})\n\t\t.then((res) => res.json())\n\t\t.then((data => {\n\t\t\tconsole.log(`Retrieve new messages from server for user ${location.state.name}`)\n\t\t\tconsole.log(\"New messages are:\")\n\t\t\tconsole.log(data.new_messages)\n\t\t\t// Render the new messages if some are retrieved\n\t\t\tif (data.new_messages.length) {\n\t\t\t\tsetRawMessages(rawMessages => [...rawMessages, ...data.new_messages])  // Update raw messsages\n\t\t\t\tconst length = data.new_messages.length;        \t\t\t\t\t   // Handle div keys\n\t\t\t\tsetMessageKey(messageKeyRef.current + length)\n\t\t\t\tconst newMessagesJSX = data.new_messages.map((message_info:string[], index:number) => {\n\t\t\t\t\t// Generate a message component for every message\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\tkey={messageKeyRef.current - length + index}\n\t\t\t\t\t\t\tname={message_info[0]}\n\t\t\t\t\t\t\tdate={message_info[1]}\n\t\t\t\t\t\t\tmessage={message_info[2]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t\t// Concatenate with currently existing messages\n\t\t\t\tsetCurrentMessages(currentMessages => [...currentMessages, ...newMessagesJSX])\n\t\t\t}\n\t\t}))\n\t}\n\n\t// Handle automatic scrolling down\n\tconst messagesEndRef:any = useRef(null);  // Bottom of messages reference\n\tconst scrollToBottom = () => {\n\t\tmessagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\n\t};\n\tuseEffect(scrollToBottom, [currentMessages]);\n\n\t// Delete all messages (Developer functionality only)\n\tfunction delete_messages() {\n\t\tfetch(\"https://online-chat-app-ellipsoul.herokuapp.com/api/clear_messages\", {\n\t\t\tmethod:\"DELETE\",\n\t\t\tmode:\"cors\",\n\t\t\theaders: {\"content_type\":\"application/json\"}\n\t\t})\n\t\t.then(() => {console.log(\"All messages deleted!\")})\n\t}\n\n\t// Determine number of rows for the chat input box\n\tconst height:number = window.innerHeight;\n\tconst numrows:number = Math.floor(height/200);\n\n\t// Tracks snackbar status\n\tconst [openSnackBar, setOpen] = useState(false);\t \t\n\t// Snackbar close handling\n\tconst closeSnackBar = () => {\n\t\tsetOpen(false)\n\t}\n\n\t// IMPORTANT: Asynchronously queries the server for new messages every second\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tretrieve_new_messages();\n\t\t}, 3000)\n\t\treturn () => clearInterval(interval);\n\t}, []);\n\n\t// State handler for dev button\n\tconst [devButtons, showDevButtons] = useState(false);\n\tfunction open_dev_menu() {\n\t\tconsole.log(\"Dev menu toggled\")\n\t\tshowDevButtons(!devButtons)\n\t}\n\n\t// Send request to delete old messages\n\tfunction delete_old_messages() {\n\t\tconst dateUnix = Date.now();\n\t\tconst queryString = `https://online-chat-app-ellipsoul.herokuapp.com/api/clear_old_messages?time=${dateUnix}`\n\n\t\tfetch(queryString, {\n\t\t\tmethod:\"DELETE\",\n\t\t\tmode: \"cors\",\n\t\t\theaders: {\"content_type\":\"application/json\"}\n\t\t})\n\t\t.then(() => {console.log(\"Old messages deleted!\")})\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{/* Main container and section */}\n\t\t\t<Container maxWidth=\"lg\" className=\"large_chat_container\" disableGutters={true}>\n\t\t\t\t<section className=\"chat_container\">\n\n\t\t\t\t\t{/* Div for displaying and deleting chat messages */}\n\t\t\t\t\t<div className=\"chat_messages_container\">\n\t\t\t\t\t\t{/* Div showing all chat messages */}\n\t\t\t\t\t\t<div className=\"chat_messages_div\">\n\t\t\t\t\t\t\t{ currentMessages }\n\t\t\t\t\t\t\t<div ref={messagesEndRef} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Div for chat message input field */}\n\t\t\t\t\t<div id=\"input_field_div\">\n\t\t\t\t\t\t<Box width=\"100%\">\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tlabel={`Say something, ${location.state.name} :)`}\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tmultiline\n\t\t\t\t\t\t\t\trows={numrows}\n\t\t\t\t\t\t\t\tvalue={messageField}\n\t\t\t\t\t\t\t\tonChange={e => setMessageField(e.target.value)}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tonKeyDown={checkEnterPressed}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Warning snackbar for invalid message */}\n\t\t\t\t\t<Snackbar\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tanchorOrigin={{\n\t\t\t\t\t\tvertical: 'bottom',\n\t\t\t\t\t\thorizontal: 'center',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\topen={openSnackBar}\n\t\t\t\t\t\tonClose={closeSnackBar}\n\t\t\t\t\t\tautoHideDuration={3000}\n\t\t\t\t\t\tmessage=\"Your message is either empty or too long!\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t{/* Submit button div */}\n\t\t\t\t\t<div className=\"submit_button_div\"> \n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\tvariant=\"contained\" \n\t\t\t\t\t\t\tcolor=\"primary\" \n\t\t\t\t\t\t\tclassName=\"submit_button\"\n\t\t\t\t\t\t\tonClick={handleSubmitMessage}\n\t\t\t\t\t\t> \n\t\t\t\t\t\t\t<span id=\"submit_button_text\"> Send </span>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\n\t\t\t\t</section>\n\t\t\t</Container>\n\n\t\t\t<button className=\"hidden_button\" onClick={open_dev_menu}>D</button>\n\t\t\t{devButtons ? <div className=\"dev_buttons_div\">\n\t\t\t\t<button onClick={delete_messages}>DA</button>\n\t\t\t\t<button onClick={delete_old_messages}>DO</button>\n\t\t\t\t<button onClick={retrieve_all_messages}>RA</button>\n\t\t\t\t<button onClick={retrieve_new_messages}>RN</button>\n\t\t\t</div>: null}\n\n\t\t</>\n\t)\n}","import React, { ReactElement } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from './Login'\nimport Chat from './Chat'\n\nfunction App():ReactElement {\n\tconsole.log('Frontend is now running!');\t\n\n\treturn (\n\t\t// Present login page as the root page and a route to the chat page\n\t\t<>\n\t\t\t<Router>\n\t\t\t\t<Login />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/chat'> \n\t\t\t\t\t\t<Chat />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}