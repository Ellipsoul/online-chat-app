{"version":3,"sources":["Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Login","useState","name","setName","shouldRedirect","redirectTo","openSnackBar","setOpen","alertMessage","setAlertMessage","to","pathname","state","handleSubmitName","e","length","height","window","innerHeight","width","innerWidth","input_theme","createMuiTheme","typography","fontSize","button_theme","Container","maxWidth","className","id","href","target","src","ThemeProvider","theme","TextField","fullWidth","multiline","rows","value","onChange","variant","color","placeholder","onKeyDown","key","Button","onClick","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","autoHideDuration","message","App","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"6SAOe,SAASA,IAAsB,IAAD,EAEpBC,mBAAS,IAFW,mBAErCC,EAFqC,KAE/BC,EAF+B,OAGPF,mBAAS,IAHF,mBAGrCG,EAHqC,KAGrBC,EAHqB,OAIZJ,oBAAS,GAJG,mBAIrCK,EAJqC,KAIvBC,EAJuB,OAKJN,mBAAS,IALL,mBAKrCO,EALqC,KAKvBC,EALuB,KAQ5C,GAAIL,EAEH,OACC,kBAAC,IAAD,CAAUM,GAAI,CACbC,SAASP,EACTQ,MAAO,CAAEV,KAAMA,MAMlB,IAAMW,EAAmB,SAACC,GAEzB,GAAKZ,EAAKa,OAKL,MAAIb,EAAKa,OAAS,IAMtB,OAAOV,EAAW,SALlBI,EAAgB,gCAChBF,GAAQ,QANRE,EAAgB,iCAChBF,GAAQ,IAcJS,EAAgBC,OAAOC,YACvBC,EAAeF,OAAOG,WAGtBC,EAAcC,YAAe,CAClCC,WAAY,CACVC,SAAU,IAAOR,KAKdS,EAAeH,YAAe,CACnCC,WAAY,CACXC,SAAU,IAAOL,EAAQ,IAAOH,KAgBlC,OACC,oCACC,kBAACU,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAU,yBAClC,6BAASC,GAAG,mBAGX,yBAAKA,GAAG,WAAR,YAGA,yBAAKA,GAAG,QAAR,8HAKA,yBAAKA,GAAG,SAEP,6BACC,uBAAGC,KAAK,+BAA+BC,OAAO,UAC7C,yBAAKC,IAAI,0BAA0BJ,UAAU,WAK/C,6BACC,uBAAGE,KAAK,uBAAuBC,OAAO,UACrC,yBAAKC,IAAI,yBAAyBJ,UAAU,WAK9C,6BACC,uBAAGE,KAAK,kCAAkCC,OAAO,UAChD,yBAAKC,IAAI,6BAA6BJ,UAAU,WAKlD,6BACC,uBAAGE,KAAK,0BAA0BC,OAAO,UACxC,yBAAKC,IAAI,0BAA0BJ,UAAU,WAK/C,6BACC,uBAAGE,KAAK,8CAA8CC,OAAO,UAC5D,yBAAKC,IAAI,yBAAyBJ,UAAU,WAK9C,6BACC,uBAAGE,KAAK,0BAA0BC,OAAO,UACxC,yBAAKC,IAAI,uBAAuBJ,UAAU,YAM7C,yBAAKC,GAAG,cAEP,yBAAKD,UAAU,cACd,kBAACK,EAAA,EAAD,CAAeC,MAAOb,GACrB,kBAACc,EAAA,EAAD,CACCC,WAAS,EACTC,WAAS,EACTC,KAAM,EACNC,MAAOrC,EACPsC,SAAU,SAAA1B,GAAC,OAAIX,EAAQW,EAAEiB,OAAOQ,QAChCE,QAAQ,WACRC,MAAM,UACNC,YAAY,aACZC,UAnFkB,SAAC9B,GACb,SAATA,EAAE+B,KACLhC,SAsFG,yBAAKe,UAAU,mBACd,kBAACK,EAAA,EAAD,CAAeC,MAAOT,GACrB,kBAACqB,EAAA,EAAD,CACCL,QAAQ,YACRC,MAAM,UACNd,UAAU,cACVmB,QAASlC,GAJV,qBAYF,kBAACmC,EAAA,EAAD,CACCN,MAAM,YACNO,aAAc,CACdC,SAAU,SACVC,WAAY,UAEZC,KAAM9C,EACN+C,QAtGgB,WACrB9C,GAAQ,IAsGH+C,iBAAkB,IAClBC,QAAS/C,QCjJDgD,MAtBf,WAGC,OAFAC,QAAQC,IAAI,4BAIX,oCACC,kBAAC1D,EAAD,QCAiB2D,QACW,cAA7B1C,OAAO2C,SAASC,UAEa,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACrB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNlB,QAAQkB,MAAMA,EAAMpB,c","file":"static/js/main.027410bf.chunk.js","sourcesContent":["import React, { useState, SyntheticEvent, ReactElement } from 'react';\nimport { Container } from '@material-ui/core';\nimport { Redirect } from 'react-router-dom';\nimport './App.css';\nimport { TextField, Button, Snackbar } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nexport default function Login():ReactElement {\n\n\tconst [name, setName] = useState(\"\");  \t\t\t    \t// Tracks user name state\n\tconst [shouldRedirect, redirectTo] = useState('');  \t// Tracks redirect location state\n\tconst [openSnackBar, setOpen] = useState(false);\t \t// Tracks snackbar status\n\tconst [alertMessage, setAlertMessage] = useState(\"\"); \t// Tracks alert message\n\n\t// Occurs when a redirect path state is detected\n\tif (shouldRedirect) {\n\t\t// Redirect to main chat after name submit\n\t\treturn (\n\t\t\t<Redirect to={{ \n\t\t\t\tpathname:shouldRedirect, \n\t\t\t\tstate: { name: name }\n\t\t\t}} />\n\t\t)\n\t}\n\n\t// Handling name submission\n\tconst handleSubmitName = (e:SyntheticEvent) => {\n\t\t// No name entered\n\t\tif (!name.length) {\n\t\t\tsetAlertMessage(\"Please enter a non-empty name\")\n\t\t\tsetOpen(true);\n\t\t}\n\t\t// Name too long\n\t\telse if (name.length > 20) {\n\t\t\tsetAlertMessage(\"Please enter a shorter name!\")\n\t\t\tsetOpen(true);\n\t\t} \n\t\t// Successful redirect to chat\n\t\telse {\n\t\t\treturn redirectTo('/chat');\n\t\t}\n\t}\n\n\t// Used to determine button and input field size\n\tconst height:number = window.innerHeight;\n\tconst width:number = window.innerWidth;\n\n\t// Theme for name input field\n\tconst input_theme = createMuiTheme({\n\t\ttypography: {\n\t\t  fontSize: 0.03 * height\n\t\t}\n\t  });\n\n\t// Theme for button\n\tconst button_theme = createMuiTheme({\n\t\ttypography: {\n\t\t\tfontSize: 0.02 * width + 0.02 * height\n\t\t}\n\t})\n\t\n\t// Enter key functionality for submitting name\n\tconst checkEnterPressed = (e:any) => {\n\t\tif (e.key == \"Enter\") {\n\t\t\thandleSubmitName(e)\n\t\t}\n\t}\n\n\t// Snackbar close handling\n\tconst closeSnackBar = () => {\n\t\tsetOpen(false);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Container maxWidth=\"lg\" className=\"large_login_container\">\n\t\t\t\t<section id=\"login_container\">\n\n\t\t\t\t\t{/* Welcome and short description */}\n\t\t\t\t\t<div id=\"welcome\">\n\t\t\t\t\t\tWelcome!\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"info\"> \n\t\t\t\t\t\tThis is a very simple chat site where you can connect with a unique name and chat with all other connect users! Made with: \n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Tech links */}\n\t\t\t\t\t<div id=\"logos\">\n\t\t\t\t\t\t{/* GitHub */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://github.com/Ellipsoul\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/images/github_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* React */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://reactjs.org/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/images/react_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Typescript */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://www.typescriptlang.org/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"images/typescript_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Python */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://www.python.org/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/images/python_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Flask */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://flask.palletsprojects.com/en/1.1.x/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/images/flask_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Typescript */}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"https://aws.amazon.com/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<img src=\"/images/aws_logo.png\" className=\"logo\"></img>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* User login area */}\n\t\t\t\t\t<div id=\"name_login\">\n\t\t\t\t\t\t{/* Name input field */}\n\t\t\t\t\t\t<div className=\"name_input\"> \n\t\t\t\t\t\t\t<ThemeProvider theme={input_theme}>\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\tmultiline\n\t\t\t\t\t\t\t\t\trows={1}\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={e => setName(e.target.value)}\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Enter name\"\n\t\t\t\t\t\t\t\t\tonKeyDown={checkEnterPressed}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ThemeProvider>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* Submit button */}\n\t\t\t\t\t\t<div className=\"name_submit_div\">\n\t\t\t\t\t\t\t<ThemeProvider theme={button_theme}>\n\t\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\t\tvariant=\"contained\" \n\t\t\t\t\t\t\t\t\tcolor=\"primary\" \n\t\t\t\t\t\t\t\t\tclassName=\"name_button\"\n\t\t\t\t\t\t\t\t\tonClick={handleSubmitName}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tStart Chatting!\t\n\t\t\t\t\t\t\t\t</Button> \n\t\t\t\t\t\t\t</ThemeProvider>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Invalid name warning snackbar */}\n\t\t\t\t\t\t<Snackbar\n\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\tanchorOrigin={{\n\t\t\t\t\t\t\tvertical: 'bottom',\n\t\t\t\t\t\t\thorizontal: 'center',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\topen={openSnackBar}\n\t\t\t\t\t\t\tonClose={closeSnackBar}\n\t\t\t\t\t\t\tautoHideDuration={3000}\n\t\t\t\t\t\t\tmessage={alertMessage}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t</section>\n\t\t\t</Container>\n\t\t</>\n\t)\n}","import React, { ReactElement, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport Login from './Login'\nimport Chat from './Chat'\n\nfunction App():ReactElement {\n\tconsole.log('Frontend is now running!');\t\n\n\treturn (\n\t\t// Basice router paths to the login and chat page\n\t\t<>\n\t\t\t<Login />\n\t\t\t{/* <Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Redirect exact from='/' to='/login'> </Redirect>\n\t\t\t\t\t<Route exact path='/login'>\n\t\t\t\t\t\t<Login />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path='/chat'>\n\t\t\t\t\t\t<Chat />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router> */}\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}